diff --git a/node_modules/@greenwood/plugin-adapter-netlify/src/index.js b/node_modules/@greenwood/plugin-adapter-netlify/src/index.js
index c075eac..df1cae1 100644
--- a/node_modules/@greenwood/plugin-adapter-netlify/src/index.js
+++ b/node_modules/@greenwood/plugin-adapter-netlify/src/index.js
@@ -13,6 +13,7 @@ function generateOutputFormat(id) {
     export async function handler (event, context = {}) {
       const { rawUrl, body, headers = {}, httpMethod } = event;
       const contentType = headers['content-type'] || '';
+      console.log({ rawUrl, body, headers, httpMethod, contentType });
       let format = body;
 
       if (['GET', 'HEAD'].includes(httpMethod.toUpperCase())) {
@@ -33,6 +34,7 @@ function generateOutputFormat(id) {
         format = JSON.stringify(body);
       }
 
+      console.log({ format, headers });
       const request = new Request(rawUrl, {
         body: format,
         method: httpMethod,
@@ -171,6 +173,17 @@ async function netlifyAdapter(compilation) {
       );
     }
 
+    const ssrApiAssets = (await fs.readdir(new URL('./api/', outputDir)))
+      .filter(file => new RegExp(/^[\w][\w-]*\.[a-zA-Z0-9]{4,20}\.[\w]{2,4}$/).test(path.basename(file)));
+
+    for (const asset of ssrApiAssets) {
+      await fs.cp(
+        new URL(`./${asset}`, new URL('./api/', outputDir)),
+        new URL(`./${asset}`, outputRoot),
+        { recursive: true }
+      );
+    }
+
     // NOTE: All functions must live at the top level
     // https://github.com/netlify/netlify-lambda/issues/90#issuecomment-486047201
     await createOutputZip(id, outputType, outputRoot, projectDirectory);
